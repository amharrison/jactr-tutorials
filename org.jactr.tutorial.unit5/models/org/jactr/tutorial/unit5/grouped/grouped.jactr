/*
 * 
 */
namespace org.jactr.tutorial.unit5.grouped.grouped{
import jactr.declarative.*
import jactr.procedural.*
import jactr.retrieval.*
import jactr.imaginal.*
import jactr.goal.*

module "org.jactr.core.module.declarative.six.DefaultDeclarativeModule6" [
  "ActivationNoise"          : "0.15"
  "BaseLevelConstant"        : "0"
  "EnablePartialMatching"    : "true"
  "MaximumDifference"        : "-1"
  "MaximumSimilarity"        : "0"
  "MismatchPenalty"          : "1"
  "PermanentActivationNoise" : "0"]
module "org.jactr.core.module.procedural.six.DefaultProceduralModule6" [
  "DefaultProductionFiringTime" : "0.05"
  "ExpectedUtilityNoise"        : "0"
  "NumberOfProductionsFired"    : "0" ]
// module "org.jactr.core.module.declarative.six.learning.DefaultDeclarativeLearningModule6"[
//   "BaseLevelLearningRate" : "NaN" //explicitly turn both off, or just omit the module
//   "MaximumAssociativeStrength" : "NaN"
// ]  
module "org.jactr.core.module.goal.six.DefaultGoalModule6" []
module "org.jactr.core.module.retrieval.six.DefaultRetrievalModule6" [
  "FINSTDurationTime"  : "20"
  "LatencyFactor"      : "1"
  "NumberOfFINSTs"     : "15"
  "RetrievalThreshold" : "-0.5" ]
module "org.jactr.core.module.imaginal.six.DefaultImaginalModule6"[]
module "org.jactr.core.module.random.six.DefaultRandomModule"["RandomSeed" : "1615230064887"]

buffers {
  @Override 
   goal {goal} [
    "Activation"              : "1"
    "StrictHarvestingEnabled" : "false" ]
}

chunktype recall-list {
  group          = null
  element        = null
  list           = null
  group-position = null
}
chunktype group {
  parent   = null
  position = null
  id       = null
}
chunktype item {
  name     = null
  parent   = null
  position = null
}

group list
chunk first["Similarities" : "((first 1.0), (second -0.5), (third -1))"],
  second["Similarities" : "((second 1.0), (third -0.5))"],
  third, fourth
//some self-referential chunks. Not generally a good idea, but lets roll with it
group group1(parent=list, position=first, id=group1), group2(parent=list, position=second, id=group2),
  group3(parent=list, position=third, id=group3)
//and the items in the lists  
item item1(name="1", parent=group1, position=first), item2(name="2", parent=group1, position=second),
  item3(name="3", parent=group1, position=third), item4(name="4", parent=group2, position=first),
  item5(name="5", parent=group2, position=second), item6(name="6", parent=group2, position=third),
  item7(name="7", parent=group3, position=first), item8(name="8", parent=group3, position=second),
  item9(name="9", parent=group3, position=third)

recall-list goal(list=list)

production recall-first-group{
  goal{
    isa recall-list
    list =  =list
  }
  ?retrieval{
    buffer =  empty
    state  =  free
    state  != error
  }
}{
  goal{
    group-position = first
  }
  +retrieval{
    isa group
    parent   =  =list
    position =  first
  }
}

production start-recall-of-group{
  goal{
    isa recall-list
  }
  retrieval{
    isa group
    id =  =group
  }
}{
  goal{
    group   = =group
    element = first
  }
  +retrieval{
    isa item
    :recently-retrieved =  false
    parent              =  =group
    position            =  first
  }
}

production harvest-first-item{
  goal{
    isa recall-list
    element =  first
    group   =  =group
  }
  retrieval{
    isa item
    name =  =name
  }
}{
  goal{
    element = second
  }
  +retrieval{
    isa item
    parent              =  =group
    position            =  second
    :recently-retrieved =  false
  }
  output("=name")
}

production harvest-second-item{
  goal{
    isa recall-list
    element =  second
    group   =  =group
  }
  retrieval{
    isa item
    name =  =name
  }
}{
  goal{
    element = third
  }
  +retrieval{
    isa item
    parent              =  =group
    position            =  third
    :recently-retrieved =  false
  }
  output("=name")
}

production harvest-third-item{
  goal{
    isa recall-list
    element =  third
    group   =  =group
  }
  retrieval{
    isa item
    name =  =name
  }
}{
  goal{
    element = fourth
  }
  +retrieval{
    isa item
    parent              =  =group
    position            =  fourth
    :recently-retrieved =  false
  }
  output("=name")
}

production second-group{
  goal{
    isa recall-list
    group-position =  first
    list           =  =list
  }
  ?retrieval{
    state =  error
  }
}{
  goal{
    group-position = second
  }
  +retrieval{
    isa group
    parent   =  =list
    position =  second
  }
}

production third-group{
  goal{
    isa recall-list
    group-position =  second
    list           =  =list
  }
  ?retrieval{
    state =  error
  }
}{
  goal{
    group-position = third
  }
  +retrieval{
    isa group
    parent   =  =list
    position =  third
  }
}
 
 }[
  "EnablePersistentExecution" : "false" // end when there is nothing left to do
  "EnableUnusedCycleSkipping" : "true" // skip ahead is safe when not using perceptual/motor
]
